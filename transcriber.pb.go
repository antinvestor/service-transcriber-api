// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.2
// source: transcriber.proto

package transcriberv1

import (
	duration "github.com/golang/protobuf/ptypes/duration"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Indicates the type of speech event.
type TranscribeResponse_SpeechEventType int32

const (
	// No speech event specified.
	TranscribeResponse_SPEECH_EVENT_TYPE_UNSPECIFIED TranscribeResponse_SpeechEventType = 0
	// This event indicates that the server has detected the end of the user's
	// speech utterance and expects no additional speech. Therefore, the server
	// will not process additional audio and will close the gRPC bidirectional
	// stream. This event is only sent if there was a force cutoff due to
	// silence being detected early. This event is only available through the
	// `latest_short` [model][google.cloud.speech.v2.Recognizer.model].
	TranscribeResponse_END_OF_SINGLE_UTTERANCE TranscribeResponse_SpeechEventType = 1
	// This event indicates that the server has detected the beginning of human
	// voice activity in the stream. This event can be returned multiple times
	// if speech starts and stops repeatedly throughout the stream. This event
	// is only sent if `voice_activity_events` is set to true.
	TranscribeResponse_SPEECH_ACTIVITY_BEGIN TranscribeResponse_SpeechEventType = 2
	// This event indicates that the server has detected the end of human voice
	// activity in the stream. This event can be returned multiple times if
	// speech starts and stops repeatedly throughout the stream. This event is
	// only sent if `voice_activity_events` is set to true.
	TranscribeResponse_SPEECH_ACTIVITY_END TranscribeResponse_SpeechEventType = 3
)

// Enum value maps for TranscribeResponse_SpeechEventType.
var (
	TranscribeResponse_SpeechEventType_name = map[int32]string{
		0: "SPEECH_EVENT_TYPE_UNSPECIFIED",
		1: "END_OF_SINGLE_UTTERANCE",
		2: "SPEECH_ACTIVITY_BEGIN",
		3: "SPEECH_ACTIVITY_END",
	}
	TranscribeResponse_SpeechEventType_value = map[string]int32{
		"SPEECH_EVENT_TYPE_UNSPECIFIED": 0,
		"END_OF_SINGLE_UTTERANCE":       1,
		"SPEECH_ACTIVITY_BEGIN":         2,
		"SPEECH_ACTIVITY_END":           3,
	}
)

func (x TranscribeResponse_SpeechEventType) Enum() *TranscribeResponse_SpeechEventType {
	p := new(TranscribeResponse_SpeechEventType)
	*p = x
	return p
}

func (x TranscribeResponse_SpeechEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TranscribeResponse_SpeechEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_transcriber_proto_enumTypes[0].Descriptor()
}

func (TranscribeResponse_SpeechEventType) Type() protoreflect.EnumType {
	return &file_transcriber_proto_enumTypes[0]
}

func (x TranscribeResponse_SpeechEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TranscribeResponse_SpeechEventType.Descriptor instead.
func (TranscribeResponse_SpeechEventType) EnumDescriptor() ([]byte, []int) {
	return file_transcriber_proto_rawDescGZIP(), []int{1, 0}
}

// Word-specific information for recognized words.
type VoiceText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The word corresponding to this set of information.
	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// The confidence estimate between 0.0 and 1.0. A higher number
	// indicates an estimated greater likelihood that the recognized words are
	// correct.
	Confidence float32 `protobuf:"fixed32,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
	// A distinct label is assigned for every speaker within the audio. This field
	// specifies which one of those speakers was detected to have spoken this
	// word.
	SpeakerLabel string `protobuf:"bytes,3,opt,name=speaker_label,json=speakerLabel,proto3" json:"speaker_label,omitempty"`
	// A label to show which language the text/data shared is in. The value can be
	// blank if the system is not able to determine the language of the text.
	Language string `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *VoiceText) Reset() {
	*x = VoiceText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcriber_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceText) ProtoMessage() {}

func (x *VoiceText) ProtoReflect() protoreflect.Message {
	mi := &file_transcriber_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceText.ProtoReflect.Descriptor instead.
func (*VoiceText) Descriptor() ([]byte, []int) {
	return file_transcriber_proto_rawDescGZIP(), []int{0}
}

func (x *VoiceText) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *VoiceText) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *VoiceText) GetSpeakerLabel() string {
	if x != nil {
		return x.SpeakerLabel
	}
	return ""
}

func (x *VoiceText) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

// `TranscribeResponse` is the only message returned to the client.
// A series of zero or more `TranscribeResponse`
// messages are streamed back to the client. If there is no recognizable
// audio then no messages are streamed back to the client.
//
//   - In each response, only one of these fields will be set:
//     `error`,
//     `speech_event_type`, or
//     one or more (repeated) `results`.
type TranscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This repeated list contains zero or more results that
	// correspond to consecutive portions of the audio currently being processed.
	// It contains zero or one results (the interim results).
	Results []*VoiceText `protobuf:"bytes,6,rep,name=results,proto3" json:"results,omitempty"`
	// Indicates the type of speech event.
	SpeechEventType TranscribeResponse_SpeechEventType `protobuf:"varint,3,opt,name=speech_event_type,json=speechEventType,proto3,enum=apis.TranscribeResponse_SpeechEventType" json:"speech_event_type,omitempty"`
	// Time offset between the beginning of the audio and event emission.
	SpeechEventOffset *duration.Duration `protobuf:"bytes,7,opt,name=speech_event_offset,json=speechEventOffset,proto3" json:"speech_event_offset,omitempty"`
}

func (x *TranscribeResponse) Reset() {
	*x = TranscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcriber_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscribeResponse) ProtoMessage() {}

func (x *TranscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transcriber_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscribeResponse.ProtoReflect.Descriptor instead.
func (*TranscribeResponse) Descriptor() ([]byte, []int) {
	return file_transcriber_proto_rawDescGZIP(), []int{1}
}

func (x *TranscribeResponse) GetResults() []*VoiceText {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *TranscribeResponse) GetSpeechEventType() TranscribeResponse_SpeechEventType {
	if x != nil {
		return x.SpeechEventType
	}
	return TranscribeResponse_SPEECH_EVENT_TYPE_UNSPECIFIED
}

func (x *TranscribeResponse) GetSpeechEventOffset() *duration.Duration {
	if x != nil {
		return x.SpeechEventOffset
	}
	return nil
}

// Request message for the
// [TranscribeRequest]
// [audio][google.cloud.speech.v2.StreamingRecognizeRequest.audio]. All
// subsequent messages must contain
// [audio][google.cloud.speech.v2.StreamingRecognizeRequest.audio] and must not
// contain a
// [streaming_config][google.cloud.speech.v2.StreamingRecognizeRequest.streaming_config]
// message.
type TranscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Inline audio bytes to be Recognized.
	// Maximum size for this field is 15 KB per request.
	Audio []byte `protobuf:"bytes,5,opt,name=audio,proto3" json:"audio,omitempty"`
}

func (x *TranscribeRequest) Reset() {
	*x = TranscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcriber_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscribeRequest) ProtoMessage() {}

func (x *TranscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transcriber_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscribeRequest.ProtoReflect.Descriptor instead.
func (*TranscribeRequest) Descriptor() ([]byte, []int) {
	return file_transcriber_proto_rawDescGZIP(), []int{2}
}

func (x *TranscribeRequest) GetAudio() []byte {
	if x != nil {
		return x.Audio
	}
	return nil
}

var File_transcriber_proto protoreflect.FileDescriptor

var file_transcriber_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x04, 0x61, 0x70, 0x69, 0x73, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x80, 0x01, 0x0a, 0x09, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xe8, 0x02, 0x0a,
	0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x54,
	0x0a, 0x11, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x13, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22,
	0x85, 0x01, 0x0a, 0x0f, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x50, 0x45, 0x45, 0x43, 0x48, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x46,
	0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x55, 0x54, 0x54, 0x45, 0x52, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x50, 0x45, 0x45, 0x43, 0x48, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x50, 0x45, 0x45, 0x43, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x03, 0x22, 0x29, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x32, 0x5b, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42,
	0x34, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x50, 0x01, 0x5a, 0x0f, 0x2e, 0x3b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transcriber_proto_rawDescOnce sync.Once
	file_transcriber_proto_rawDescData = file_transcriber_proto_rawDesc
)

func file_transcriber_proto_rawDescGZIP() []byte {
	file_transcriber_proto_rawDescOnce.Do(func() {
		file_transcriber_proto_rawDescData = protoimpl.X.CompressGZIP(file_transcriber_proto_rawDescData)
	})
	return file_transcriber_proto_rawDescData
}

var file_transcriber_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_transcriber_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_transcriber_proto_goTypes = []interface{}{
	(TranscribeResponse_SpeechEventType)(0), // 0: apis.TranscribeResponse.SpeechEventType
	(*VoiceText)(nil),                       // 1: apis.VoiceText
	(*TranscribeResponse)(nil),              // 2: apis.TranscribeResponse
	(*TranscribeRequest)(nil),               // 3: apis.TranscribeRequest
	(*duration.Duration)(nil),               // 4: google.protobuf.Duration
}
var file_transcriber_proto_depIdxs = []int32{
	1, // 0: apis.TranscribeResponse.results:type_name -> apis.VoiceText
	0, // 1: apis.TranscribeResponse.speech_event_type:type_name -> apis.TranscribeResponse.SpeechEventType
	4, // 2: apis.TranscribeResponse.speech_event_offset:type_name -> google.protobuf.Duration
	3, // 3: apis.TranscriberService.Transcribe:input_type -> apis.TranscribeRequest
	2, // 4: apis.TranscriberService.Transcribe:output_type -> apis.TranscribeResponse
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_transcriber_proto_init() }
func file_transcriber_proto_init() {
	if File_transcriber_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_transcriber_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcriber_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcriber_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transcriber_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_transcriber_proto_goTypes,
		DependencyIndexes: file_transcriber_proto_depIdxs,
		EnumInfos:         file_transcriber_proto_enumTypes,
		MessageInfos:      file_transcriber_proto_msgTypes,
	}.Build()
	File_transcriber_proto = out.File
	file_transcriber_proto_rawDesc = nil
	file_transcriber_proto_goTypes = nil
	file_transcriber_proto_depIdxs = nil
}
